buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {


  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 21
  compileJava {
    options.incremental = true
  }
  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  compileJava.doLast {
    // projectFolder/assets
    def assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    def assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
      assetsFile.append(it + "\n")
    }
  }
}

subprojects {
  version = '1.0.0'
  ext.appName = 'Strategic'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}
/*project(":tests") {
  apply plugin: "java"

  sourceSets.test.java.srcDirs = ["src/"]

  dependencies {

    *//**
     * If you do have some classes to test in os specific code you may want to uncomment
     * some of these lines.
     *
     * BUT: I recommend to create seperate test sub projects for each platform. Trust me :)
     *
     *//*

//        compile project(":android")
//        compile project(":html")
//        compile project(":desktop")


//        if(System.getProperty("os.name").toLowerCase().indexOf("mac") >= 0) {
//        	compile project(":ios")
//        }

    compile project(":core")

    compile "junit:junit:4.+"
    compile "org.mockito:mockito-all:1.9.+"

    compile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"

    testCompile 'junit:junit:4.+'
    testCompile "org.mockito:mockito-all:1.9.+"

    testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testCompile "com.badlogicgames.gdx:gdx:$gdxVersion"
    testCompile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}*/
eclipse.project.name = 'Strategic' + '-parent'
